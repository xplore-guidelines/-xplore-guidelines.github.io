{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"checkstyle/","text":"Checkstyle \u00b6 Checkstyle is a tool that helps developers write code that adhers to coding standards. Incremental approach \u00b6 Developers writing long methods that were difficult to understand Solved this using a combination of checks: Executable Statement Count and Method Length . Those same methods often contained a lot of nested loops and conditionals. Solved by using ...","title":"Checkstyle"},{"location":"checkstyle/#checkstyle","text":"Checkstyle is a tool that helps developers write code that adhers to coding standards.","title":"Checkstyle"},{"location":"checkstyle/#incremental-approach","text":"Developers writing long methods that were difficult to understand Solved this using a combination of checks: Executable Statement Count and Method Length . Those same methods often contained a lot of nested loops and conditionals. Solved by using ...","title":"Incremental approach"},{"location":"checkstyle/example-configuration/","text":"Example configuration \u00b6 checkstyle.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\" \"https://checkstyle.org/dtds/configuration_1_3.dtd\"> <module name= \"Checker\" > <property name= \"charset\" value= \"UTF-8\" /> <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> </module> <module name= \"LineLength\" > <property name= \"max\" value= \"120\" /> </module> <module name= \"OrderedProperties\" /> <module name= \"UniqueProperties\" /> </module>","title":"Example configuration"},{"location":"checkstyle/example-configuration/#example-configuration","text":"checkstyle.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\" \"https://checkstyle.org/dtds/configuration_1_3.dtd\"> <module name= \"Checker\" > <property name= \"charset\" value= \"UTF-8\" /> <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> </module> <module name= \"LineLength\" > <property name= \"max\" value= \"120\" /> </module> <module name= \"OrderedProperties\" /> <module name= \"UniqueProperties\" /> </module>","title":"Example configuration"},{"location":"checkstyle/checks/miscellaneous/","text":"Miscellaneous checks \u00b6 Unique properties \u00b6 Detects duplicated keys in properties files. Duplicate keys are usually an error and it is best to avoid them by rejecting them completely. checkstyle.xml 1 2 3 <module name= \"Checker\" > <module name= \"UniqueProperties\" /> </module> Ordered properties \u00b6 Sorted properties make it easy for people to find required properties by name in file. It makes merges more easy. While there are no problems at runtime. checkstyle.xml 1 2 3 <module name= \"Checker\" > <module name= \"OrderedProperties\" /> </module>","title":"Miscellaneous checks"},{"location":"checkstyle/checks/miscellaneous/#miscellaneous-checks","text":"","title":"Miscellaneous checks"},{"location":"checkstyle/checks/miscellaneous/#unique-properties","text":"Detects duplicated keys in properties files. Duplicate keys are usually an error and it is best to avoid them by rejecting them completely. checkstyle.xml 1 2 3 <module name= \"Checker\" > <module name= \"UniqueProperties\" /> </module>","title":"Unique properties"},{"location":"checkstyle/checks/miscellaneous/#ordered-properties","text":"Sorted properties make it easy for people to find required properties by name in file. It makes merges more easy. While there are no problems at runtime. checkstyle.xml 1 2 3 <module name= \"Checker\" > <module name= \"OrderedProperties\" /> </module>","title":"Ordered properties"},{"location":"checkstyle/checks/size/","text":"Size checks \u00b6 Executable statement count \u00b6 The executable statement count check limits the amount of executable statements per method. Clean Code Functions should do one thing. They should do it well. They should do it only. checkstyle.xml 1 2 3 4 5 6 7 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"ExecutableStatementCount\" > <property name= \"max\" value= \"5\" /> </module> </module> </module> Method length \u00b6 The method length check counts the number of lines in a method and asserts that it does not exceed a configured maximum. Method length check counts every line, even when they belong to one single executable statements like a builder or stream operation spread over multiple lines. Therefor we prefer to limit the amount of code in one method using the executable statement count check. However the method length check can still provide useful. We've had customers were an external code audit that heavily relied on static code analysis flagged some methods exceeding 30 lines of code. Although those methods were very readable and only contained a limited amount of executable statements, they still impacted our overall score. Setting an upper limit of 30 lines per method can avoid such scenario's. checkstyle.xml 1 2 3 4 5 6 7 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"MethodLength\" > <property name= \"max\" value= \"30\" /> </module> </module> </module> Line length \u00b6 checkstyle.xml 1 2 3 4 5 <module name= \"Checker\" > <module name= \"LineLength\" > <property name= \"max\" value= \"120\" /> </module> </module> If necessary, you can limit the scope of this Check to files with specific extensions (e.g. java). checkstyle.xml 1 2 3 4 5 6 <module name= \"Checker\" > <module name= \"LineLength\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"max\" value= \"120\" /> </module> </module> Parameter number \u00b6 Clean Code Functions should have a small number of arguments. No argument is best, followed by one, two, and three. More than three is very questionable and should be avoided with prejudice. By default the parameter number check allows up to 7 parameters per method. checkstyle.xml 1 2 3 4 5 6 7 8 9 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"ParameterNumber\" > <property name= \"ignoreOverriddenMethods\" value= \"true\" /> <property name= \"max\" value= \"3\" /> <property name= \"tokens\" value= \"METHOD_DEF\" /> </module> </module> </module>","title":"Size checks"},{"location":"checkstyle/checks/size/#size-checks","text":"","title":"Size checks"},{"location":"checkstyle/checks/size/#executable-statement-count","text":"The executable statement count check limits the amount of executable statements per method. Clean Code Functions should do one thing. They should do it well. They should do it only. checkstyle.xml 1 2 3 4 5 6 7 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"ExecutableStatementCount\" > <property name= \"max\" value= \"5\" /> </module> </module> </module>","title":"Executable statement count"},{"location":"checkstyle/checks/size/#method-length","text":"The method length check counts the number of lines in a method and asserts that it does not exceed a configured maximum. Method length check counts every line, even when they belong to one single executable statements like a builder or stream operation spread over multiple lines. Therefor we prefer to limit the amount of code in one method using the executable statement count check. However the method length check can still provide useful. We've had customers were an external code audit that heavily relied on static code analysis flagged some methods exceeding 30 lines of code. Although those methods were very readable and only contained a limited amount of executable statements, they still impacted our overall score. Setting an upper limit of 30 lines per method can avoid such scenario's. checkstyle.xml 1 2 3 4 5 6 7 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"MethodLength\" > <property name= \"max\" value= \"30\" /> </module> </module> </module>","title":"Method length"},{"location":"checkstyle/checks/size/#line-length","text":"checkstyle.xml 1 2 3 4 5 <module name= \"Checker\" > <module name= \"LineLength\" > <property name= \"max\" value= \"120\" /> </module> </module> If necessary, you can limit the scope of this Check to files with specific extensions (e.g. java). checkstyle.xml 1 2 3 4 5 6 <module name= \"Checker\" > <module name= \"LineLength\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"max\" value= \"120\" /> </module> </module>","title":"Line length"},{"location":"checkstyle/checks/size/#parameter-number","text":"Clean Code Functions should have a small number of arguments. No argument is best, followed by one, two, and three. More than three is very questionable and should be avoided with prejudice. By default the parameter number check allows up to 7 parameters per method. checkstyle.xml 1 2 3 4 5 6 7 8 9 <module name= \"Checker\" > <module name= \"TreeWalker\" > <module name= \"ParameterNumber\" > <property name= \"ignoreOverriddenMethods\" value= \"true\" /> <property name= \"max\" value= \"3\" /> <property name= \"tokens\" value= \"METHOD_DEF\" /> </module> </module> </module>","title":"Parameter number"},{"location":"checkstyle/checks/whitespace/","text":"Whitespace checks \u00b6 File tab character \u00b6 Code can be indented using tabs or spaces. Make sure your team picks one indentation style and sticks with it. Operations like code merges will be much easier if everyone uses the same style. If the code is indented with spaces, it is a good idea to use this check to reject lines containing a tab character. checkstyle.xml 1 2 3 4 5 <module name= \"Checker\" > <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> </module> </module> If necessary, you can limit the scope of this Check to files with specific extensions (e.g. java). checkstyle.xml 1 2 3 4 5 6 <module name= \"Checker\" > <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> <property name= \"fileExtensions\" value= \"java\" /> </module> </module>","title":"Whitespace checks"},{"location":"checkstyle/checks/whitespace/#whitespace-checks","text":"","title":"Whitespace checks"},{"location":"checkstyle/checks/whitespace/#file-tab-character","text":"Code can be indented using tabs or spaces. Make sure your team picks one indentation style and sticks with it. Operations like code merges will be much easier if everyone uses the same style. If the code is indented with spaces, it is a good idea to use this check to reject lines containing a tab character. checkstyle.xml 1 2 3 4 5 <module name= \"Checker\" > <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> </module> </module> If necessary, you can limit the scope of this Check to files with specific extensions (e.g. java). checkstyle.xml 1 2 3 4 5 6 <module name= \"Checker\" > <module name= \"FileTabCharacter\" > <property name= \"eachLine\" value= \"true\" /> <property name= \"fileExtensions\" value= \"java\" /> </module> </module>","title":"File tab character"},{"location":"dependencies/","text":"Dependencies \u00b6 Limit dependencies \u00b6 Keep dependencies up-to-date \u00b6 Dependabot \u00b6 Renovatebot \u00b6 Old group id alerter \u00b6 Old groupIds alerter \u2197 is a Maven plugin that checks for deprecated groupId + artifactId combinations. The plugin will recommend to depend on org.apache.commons:commons-lang3 instead of depending on commons-lang:commons-lang .","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"","title":"Dependencies"},{"location":"dependencies/#limit-dependencies","text":"","title":"Limit dependencies"},{"location":"dependencies/#keep-dependencies-up-to-date","text":"","title":"Keep dependencies up-to-date"},{"location":"dependencies/#dependabot","text":"","title":"Dependabot"},{"location":"dependencies/#renovatebot","text":"","title":"Renovatebot"},{"location":"dependencies/#old-group-id-alerter","text":"Old groupIds alerter \u2197 is a Maven plugin that checks for deprecated groupId + artifactId combinations. The plugin will recommend to depend on org.apache.commons:commons-lang3 instead of depending on commons-lang:commons-lang .","title":"Old group id alerter"},{"location":"gradle/","text":"Gradle \u00b6","title":"Gradle"},{"location":"gradle/#gradle","text":"","title":"Gradle"},{"location":"maven/bill-of-materials/","text":"Bill of Materials \u00b6 BOM stands for Bill of Materials. A BOM is a special kind of POM that is used to control the versions of a set of related artifacts. The file provides a central place to define and update those versions. Whenever a framework or library you depend on provides a BOM file, it is the preferred way to introduce that dependency into your project. pom.xml 1 2 3 4 5 6 7 8 9 10 11 <dependencyMangement> <dependencies> <dependency> <groupId> org.springframework.cloud </group> <artifactId> spring-cloud-dependencies </artifactId> <version> 2020.0.4 </version> <scope> import </scope> <type> pom </type> </dependency> </dependencies> </dependencyMangement> Examples \u00b6 The following frameworks and libraries that we often use provide a BOM file. When adding a new framework or library, check if a BOM file is provided. Apache CXF Quarkus Spring Boot Spring Cloud Spring Framework Testcontainers","title":"Bill of Materials"},{"location":"maven/bill-of-materials/#bill-of-materials","text":"BOM stands for Bill of Materials. A BOM is a special kind of POM that is used to control the versions of a set of related artifacts. The file provides a central place to define and update those versions. Whenever a framework or library you depend on provides a BOM file, it is the preferred way to introduce that dependency into your project. pom.xml 1 2 3 4 5 6 7 8 9 10 11 <dependencyMangement> <dependencies> <dependency> <groupId> org.springframework.cloud </group> <artifactId> spring-cloud-dependencies </artifactId> <version> 2020.0.4 </version> <scope> import </scope> <type> pom </type> </dependency> </dependencies> </dependencyMangement>","title":"Bill of Materials"},{"location":"maven/bill-of-materials/#examples","text":"The following frameworks and libraries that we often use provide a BOM file. When adding a new framework or library, check if a BOM file is provided. Apache CXF Quarkus Spring Boot Spring Cloud Spring Framework Testcontainers","title":"Examples"},{"location":"maven/checkstyle/","text":"Checkstyle \u00b6 We recommend running Checkstyle on every build. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <configuration> <configLocation> checkstyle.xml </configLocation> <failOnViolation> true </failOnViolation> <logViolationCountToConsole> true </logViolationCountToConsole> <logViolationsToConsole> true </logViolationsToConsole> </configuration> <executions> <execution> <id> checkstyle </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> Tip If necessary, you can disable the Checkstyle plugin for a specific build by adding -Dcheckstyle.skip to the command line. Checkstyle version \u00b6 The Maven Checkstyle Plugin \u2197 does not always depend on the latest version of Checkstyle. For example version 3.1.2 of the plugin depends on version 8.29 of Checkstyle while version 9.1 has already been released. New versions of Checkstyle often include new checks and bug fixes for existing checks. You can override the default Checkstyle version used by the Maven plugin. pom.xml 1 2 3 4 5 6 7 8 9 10 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <dependencies> <dependency> <groupId> com.puppycrawl.tools </groupId> <artifactId> checkstyle </artifactId> <version> 9.1 </version> </dependency> </dependencies> </plugin> Local configuration \u00b6 Global configuration \u00b6 When working on more than one codebase where you want to keep the coding style consistent, you can consider packaging and releasing the checkstyle.xml configuration file as a separate artifact. Add a dependency to the new artifact and point to the shared configuration file. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <configuration> <configLocation> checkstyle.xml </configLocation> </configuration> <dependencies> <dependency> <groupId> be.xplore </groupId> <artifactId> code-style </artifactId> <version> 1.0.0 </version> </dependency> </dependencies> </plugin>","title":"Checkstyle"},{"location":"maven/checkstyle/#checkstyle","text":"We recommend running Checkstyle on every build. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <configuration> <configLocation> checkstyle.xml </configLocation> <failOnViolation> true </failOnViolation> <logViolationCountToConsole> true </logViolationCountToConsole> <logViolationsToConsole> true </logViolationsToConsole> </configuration> <executions> <execution> <id> checkstyle </id> <phase> validate </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> Tip If necessary, you can disable the Checkstyle plugin for a specific build by adding -Dcheckstyle.skip to the command line.","title":"Checkstyle"},{"location":"maven/checkstyle/#checkstyle-version","text":"The Maven Checkstyle Plugin \u2197 does not always depend on the latest version of Checkstyle. For example version 3.1.2 of the plugin depends on version 8.29 of Checkstyle while version 9.1 has already been released. New versions of Checkstyle often include new checks and bug fixes for existing checks. You can override the default Checkstyle version used by the Maven plugin. pom.xml 1 2 3 4 5 6 7 8 9 10 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <dependencies> <dependency> <groupId> com.puppycrawl.tools </groupId> <artifactId> checkstyle </artifactId> <version> 9.1 </version> </dependency> </dependencies> </plugin>","title":"Checkstyle version"},{"location":"maven/checkstyle/#local-configuration","text":"","title":"Local configuration"},{"location":"maven/checkstyle/#global-configuration","text":"When working on more than one codebase where you want to keep the coding style consistent, you can consider packaging and releasing the checkstyle.xml configuration file as a separate artifact. Add a dependency to the new artifact and point to the shared configuration file. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 <plugin> <artifactId> maven-checkstyle-plugin </artifactId> <configuration> <configLocation> checkstyle.xml </configLocation> </configuration> <dependencies> <dependency> <groupId> be.xplore </groupId> <artifactId> code-style </artifactId> <version> 1.0.0 </version> </dependency> </dependencies> </plugin>","title":"Global configuration"},{"location":"maven/compiler-warnings/","text":"Compiler warnings \u00b6 Nobody likes to work on a codebase littered with thousands of compiler warnings. Compiler warnings call out mistakes and should not be ignored. Take compiler warnings seriously, and strive to compile warning-free. Maven plugin \u00b6 Configure the Maven compiler plugin \u2197 to show warnings and deprecations and to fail the build when any warnings or deprecations are found. Using -Xlint:all , you enable all compiler warnings that come with the Java compiler. Specific compiler warnings can be excluded using - . For example excluding warnings related to annotation processing can be excluded by using -Xlint:all,-processing . pom.xml 1 2 3 4 5 6 7 8 9 <plugin> <artifactId> maven-compiler-plugin </artifactId> <configuration> <compilerArgument> -Xlint:all,-processing </compilerArgument> <failOnWarning> true </failOnWarning> <showDeprecation> true </showDeprecation> <showWarnings> true </showWarnings> </configuration> </plugin> New codebase \u00b6 When starting from scratch, or when adding a new module to an existing codebase, configure your build tool to immediately fail the build on any warning. In other words, treat warnings as compilation errors. Existing codebase \u00b6 Applying the technique described above can be difficult in an existing codebase that already contains lots of warnings. Instead, try to apply the technique module per module, gradually working towards a warning free codebase. Whenever a new module is added, treat warnings as errors from the start. Apply the boyscout rule, always leave the code better than you found it. Never introduce more warnings and never ignore existing warnings. Whenever you stumble upon a warning in a piece of code you're working on, clean it up - no excuses.","title":"Compiler warnings"},{"location":"maven/compiler-warnings/#compiler-warnings","text":"Nobody likes to work on a codebase littered with thousands of compiler warnings. Compiler warnings call out mistakes and should not be ignored. Take compiler warnings seriously, and strive to compile warning-free.","title":"Compiler warnings"},{"location":"maven/compiler-warnings/#maven-plugin","text":"Configure the Maven compiler plugin \u2197 to show warnings and deprecations and to fail the build when any warnings or deprecations are found. Using -Xlint:all , you enable all compiler warnings that come with the Java compiler. Specific compiler warnings can be excluded using - . For example excluding warnings related to annotation processing can be excluded by using -Xlint:all,-processing . pom.xml 1 2 3 4 5 6 7 8 9 <plugin> <artifactId> maven-compiler-plugin </artifactId> <configuration> <compilerArgument> -Xlint:all,-processing </compilerArgument> <failOnWarning> true </failOnWarning> <showDeprecation> true </showDeprecation> <showWarnings> true </showWarnings> </configuration> </plugin>","title":"Maven plugin"},{"location":"maven/compiler-warnings/#new-codebase","text":"When starting from scratch, or when adding a new module to an existing codebase, configure your build tool to immediately fail the build on any warning. In other words, treat warnings as compilation errors.","title":"New codebase"},{"location":"maven/compiler-warnings/#existing-codebase","text":"Applying the technique described above can be difficult in an existing codebase that already contains lots of warnings. Instead, try to apply the technique module per module, gradually working towards a warning free codebase. Whenever a new module is added, treat warnings as errors from the start. Apply the boyscout rule, always leave the code better than you found it. Never introduce more warnings and never ignore existing warnings. Whenever you stumble upon a warning in a piece of code you're working on, clean it up - no excuses.","title":"Existing codebase"},{"location":"maven/dependency-management/","text":"Dependency management \u00b6 The best place to configure the version of the dependencies you use is in the dependency management part of your POM file. In a multi-module project, this is typically configured in a parent POM from which all other POM 's inherit. pom.xml 1 2 3 4 5 6 7 8 9 <dependencyManagement> <dependencies> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> 1.7.32 </version> </dependency> </dependencies> </dependencyManagement> Bill of Materials \u00b6 The dependency management part of your POM file is also where you can import BOM files. BOM files define a consistent version for all the artifacts from one \"library\". See Bill of Materials .","title":"Dependency management"},{"location":"maven/dependency-management/#dependency-management","text":"The best place to configure the version of the dependencies you use is in the dependency management part of your POM file. In a multi-module project, this is typically configured in a parent POM from which all other POM 's inherit. pom.xml 1 2 3 4 5 6 7 8 9 <dependencyManagement> <dependencies> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-api </artifactId> <version> 1.7.32 </version> </dependency> </dependencies> </dependencyManagement>","title":"Dependency management"},{"location":"maven/dependency-management/#bill-of-materials","text":"The dependency management part of your POM file is also where you can import BOM files. BOM files define a consistent version for all the artifacts from one \"library\". See Bill of Materials .","title":"Bill of Materials"},{"location":"maven/encoding/","text":"Always configure the source and output encoding for Maven to avoid the default platform encoding from influencing the build outcome. UTF-8 is the de-facto standard. pom.xml 1 2 3 4 <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <project.reporting.outputEncoding> UTF-8 </project.reporting.outputEncoding> </properties> If you don't specify these properties, a warning usually appears in the build output. Tip If your project inherits from the spring-boot-starter-parent POM , these properties are already configured.","title":"Encoding"},{"location":"maven/plugin-management/","text":"Plugin management \u00b6 pom.xml 1 2 3 4 5 6 7 8 9 10 <build> <pluginManagement> <plugins> <plugin> <artifactId> maven-compiler-plugin </artifactId> <version> 3.8.1 </version> </plugin> </plugins> </pluginManagement> </build>","title":"Plugin management"},{"location":"maven/plugin-management/#plugin-management","text":"pom.xml 1 2 3 4 5 6 7 8 9 10 <build> <pluginManagement> <plugins> <plugin> <artifactId> maven-compiler-plugin </artifactId> <version> 3.8.1 </version> </plugin> </plugins> </pluginManagement> </build>","title":"Plugin management"},{"location":"maven/pmd/","text":"PMD \u00b6 We recommend running Checkstyle on every build. Add the Maven PMD Plugin \u2197 to your parent POM . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <plugin> <artifactId> maven-pmd-plugin </artifactId> <configuration> <includeTests> true </includeTests> <linkXRef> false </linkXRef> <printFailingErrors> true </printFailingErrors> <rulesets> pmd.xml </rulesets> </configuration> <executions> <execution> <id> pmd </id> <phase> process-test-classes </phase> <goals> <goal> check </goal> <goal> cpd-check </goal> </goals> </execution> </executions> </plugin> Tip If necessary, you can disable the PMD plugin for a specific build by adding -Dpmd.skip to the command line. Exclude folders \u00b6 It is often usesful to exclude certain folders from the PMD analysis. For example folders that contain generated code. 1 2 3 4 5 6 <configuration> <excludeRoots> <excludeRoot> ${project.build.directory}/generated-sources </excludeRoot> <excludeRoot> ${project.build.directory}/generated-test-sources </excludeRoot> </excludeRoots> </configuration> Local configuration \u00b6 Global configuration \u00b6 When working on more than one codebase where you want to keep the PMD configuration consistent, you can consider packaging and releasing the pmd.xml configuration file as a separate artifact. Add a dependency to the new artifact and point to the shared configuration file. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 <plugin> <artifactId> maven-pmd-plugin </artifactId> <configuration> <configLocation> pmd.xml </configLocation> </configuration> <dependencies> <dependency> <groupId> be.xplore </groupId> <artifactId> code-style </artifactId> <version> 1.0.0 </version> </dependency> </dependencies> </plugin>","title":"PMD"},{"location":"maven/pmd/#pmd","text":"We recommend running Checkstyle on every build. Add the Maven PMD Plugin \u2197 to your parent POM . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <plugin> <artifactId> maven-pmd-plugin </artifactId> <configuration> <includeTests> true </includeTests> <linkXRef> false </linkXRef> <printFailingErrors> true </printFailingErrors> <rulesets> pmd.xml </rulesets> </configuration> <executions> <execution> <id> pmd </id> <phase> process-test-classes </phase> <goals> <goal> check </goal> <goal> cpd-check </goal> </goals> </execution> </executions> </plugin> Tip If necessary, you can disable the PMD plugin for a specific build by adding -Dpmd.skip to the command line.","title":"PMD"},{"location":"maven/pmd/#exclude-folders","text":"It is often usesful to exclude certain folders from the PMD analysis. For example folders that contain generated code. 1 2 3 4 5 6 <configuration> <excludeRoots> <excludeRoot> ${project.build.directory}/generated-sources </excludeRoot> <excludeRoot> ${project.build.directory}/generated-test-sources </excludeRoot> </excludeRoots> </configuration>","title":"Exclude folders"},{"location":"maven/pmd/#local-configuration","text":"","title":"Local configuration"},{"location":"maven/pmd/#global-configuration","text":"When working on more than one codebase where you want to keep the PMD configuration consistent, you can consider packaging and releasing the pmd.xml configuration file as a separate artifact. Add a dependency to the new artifact and point to the shared configuration file. pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 <plugin> <artifactId> maven-pmd-plugin </artifactId> <configuration> <configLocation> pmd.xml </configLocation> </configuration> <dependencies> <dependency> <groupId> be.xplore </groupId> <artifactId> code-style </artifactId> <version> 1.0.0 </version> </dependency> </dependencies> </plugin>","title":"Global configuration"},{"location":"maven/source-plugin/","text":"Source plugin \u00b6 When building shared components, e.g. a JAR file published to an internal Maven repository, configure the Maven source plugin to attach an additional JAR file containing the projects sources. pom.xml 1 2 3 4 5 6 7 8 9 10 <plugin> <artifactId> maven-source-plugin </artifactId> <executions> <execution> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin>","title":"Source plugin"},{"location":"maven/source-plugin/#source-plugin","text":"When building shared components, e.g. a JAR file published to an internal Maven repository, configure the Maven source plugin to attach an additional JAR file containing the projects sources. pom.xml 1 2 3 4 5 6 7 8 9 10 <plugin> <artifactId> maven-source-plugin </artifactId> <executions> <execution> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin>","title":"Source plugin"},{"location":"maven/enforcer/ban-duplicate-dependencies/","text":"Ban Duplicate Dependencies \u00b6 Duplicate dependencies are dependencies that have the same groupId , artifactId , type and classifier . Configure the maven-enforcer-plugin to fail the build if duplicate dependencies are found. pom.xml 1 2 3 4 5 6 7 8 <plugin> <artifactId> maven-enforcer-plugin </artifactId> <configuration> <rules> <banDuplicatePomDependencyVersions/> </rules> </configuration> </plugin>","title":"Ban Duplicate Dependencies"},{"location":"maven/enforcer/ban-duplicate-dependencies/#ban-duplicate-dependencies","text":"Duplicate dependencies are dependencies that have the same groupId , artifactId , type and classifier . Configure the maven-enforcer-plugin to fail the build if duplicate dependencies are found. pom.xml 1 2 3 4 5 6 7 8 <plugin> <artifactId> maven-enforcer-plugin </artifactId> <configuration> <rules> <banDuplicatePomDependencyVersions/> </rules> </configuration> </plugin>","title":"Ban Duplicate Dependencies"},{"location":"maven/enforcer/require-plugin-versions/","text":"Require Plugin Versions \u00b6 Relying on the default plugin versions from a particular Maven version is a bad practice. Always define the version of every plugin used by the build to guarantee build reproducibility. Configure the maven-enforcer-plugin to fail the build if a plugin is used without specifying the version to use. pom.xml 1 2 3 4 5 6 7 8 <plugin> <artifactId> maven-enforcer-plugin </artifactId> <configuration> <rules> <requirePluginVersions/> </rules> </configuration> </plugin> Tip A good practice is to specify plugin version in the <pluginManagement/> element of a parent POM .","title":"Require Plugin Versions"},{"location":"maven/enforcer/require-plugin-versions/#require-plugin-versions","text":"Relying on the default plugin versions from a particular Maven version is a bad practice. Always define the version of every plugin used by the build to guarantee build reproducibility. Configure the maven-enforcer-plugin to fail the build if a plugin is used without specifying the version to use. pom.xml 1 2 3 4 5 6 7 8 <plugin> <artifactId> maven-enforcer-plugin </artifactId> <configuration> <rules> <requirePluginVersions/> </rules> </configuration> </plugin> Tip A good practice is to specify plugin version in the <pluginManagement/> element of a parent POM .","title":"Require Plugin Versions"}]}